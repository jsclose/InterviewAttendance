group_by(Marital_Status, Attendance) %>%
summarise(count = n())
plot<-ggplot(data=attendenceByMarriage, aes(x=Marital_Status, y=count, fill = (Attendance)))+
geom_bar(stat="identity" , position = "dodge")
attendenceByMarriage <- interviews %>%
group_by(Marital_Status, Attendance) %>%
summarise(count = n())
plot<-ggplot(data=attendenceByMarriage, aes(x=Marital_Status, y=count, fill = (Attendance)))+
geom_bar(stat="identity" , position = "dodge")
plot
plot
table(interviews$Date)
interviews$Date <- as.character(interviews$Date)
interviews$Date <- sapply(strsplit(as.character(interviews$Date),'&'), "[", 1)
library(lubridate)
interviews$Date <- parse_date_time(interviews$Date, ("dmy"))
interviews$Date <- as.factor(interviews$Date)
table(interviews$Date)
w
w
interviews$DayOfWeek <- wday(as.Date(interviews$Date), label = TRUE)
table(interviews$DayOfWeek)
attendenceByDOW <- interviews %>%
group_by(DayOfWeek, Attendance) %>%
summarise(count = n())
plot<-ggplot(data=attendenceByDOW, aes(x=DayOfWeek, y=count, fill = (Attendance)))+
geom_bar(stat="identity" , position = "dodge")
plot
table(interviews$Skillset)
i <- interviews[-6]
i[is.na(i)] <- "no"
colSums(is.na.data.frame(i))
set.seed(12345)
i_rand <- i[order(runif(1232)), ]
i_train <- i[1:1000, ]
i_test <- i[1001:1232, ]
prop.table(table(i_train$Attendance))
prop.table(table(i_test$Attendance))
interview_model <- C5.0(i_train[-20], i_train$Attendance, trials = 15)
interview_model
summary(interview_model)
interview_pred <- predict(interview_model, i_test)
CrossTable(i_test$Attendance, interview_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual Attendance', 'predicted Attendance'))
error_cost <- matrix(c(0, 6, 1, 0), nrow = 2)
error_cost
interview_cost <- C5.0(i_train[-20], i_train$Attendance,
costs = error_cost, trials = 40)
interview_cost_pred <- predict(interview_cost, i_test)
CrossTable(i_test$Attendance, interview_cost_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual attendance', 'predicted attendance'))
library(kernlab)
attendance_classifier <- ksvm(Attendance ~ ., data = i_train,
kernel = "vanilladot")
attendance_classifier <- ksvm(Attendance ~ ., data = i_train,
kernel = "vanilladot")
attendance_classifier
lookup <- function(distances_lookup_table, start, end) {
dist <- distances_lookup_table[tolower(distances_lookup_table$Native_Loc) == as.character(start), as.character(end)]
# If the lookup table returns nothing then set it to be -1 otherwise return the distance
if (is.null(dist)){
return (-1)
} else {
return(dist)
}
}
for(i in 1:nrow(interviews)){
val <-lookup(distances_lookup_table, tolower(interviews$Location[i]), sapply((as.character(interviews$Venue[i])),function(x) paste(toupper(substr(x,1,1)),substr(x,2,nchar(x)),sep="")))
interviews$Distance[i] <- val
}
i <- interviews[-6]
i[is.na(i)] <- "no"
colSums(is.na.data.frame(i))
set.seed(12345)
i_rand <- i[order(runif(1232)), ]
i_train <- i[1:1000, ]
i_test <- i[1001:1232, ]
prop.table(table(i_train$Attendance))
prop.table(table(i_test$Attendance))
interview_model <- C5.0(i_train[-20], i_train$Attendance, trials = 15)
interview_model
summary(interview_model)
interview_pred <- predict(interview_model, i_test)
CrossTable(i_test$Attendance, interview_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual Attendance', 'predicted Attendance'))
error_cost <- matrix(c(0, 6, 1, 0), nrow = 2)
error_cost
interview_cost <- C5.0(i_train[-20], i_train$Attendance,
costs = error_cost, trials = 40)
interview_cost_pred <- predict(interview_cost, i_test)
CrossTable(i_test$Attendance, interview_cost_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual attendance', 'predicted attendance'))
i_dummy <- i[-1]
i_dummy <- i_dummy[-19]
i_dummy <-model.matrix(~ ., data = i_dummy)
i_dummy <- as.data.frame(scale(i_dummy))
i_dummy <- as.data.frame(scale(i_dummy))
i_dummy <- i_dummy[-1]
i_dummy <- i_dummy[-1]
i_train <-i_dummy[0:(.80*nrow(i_dummy)),]
i_test <- i_dummy[(.80*nrow(i_dummy)):nrow(i_dummy), ]
i_dummy <- i_dummy[-1]
i_train <-i_dummy[0:(.80*nrow(i_dummy)),]
i_test <- i_dummy[(.80*nrow(i_dummy)):nrow(i_dummy), ]
i_train_labels <- i[0:(.80*nrow(i_dummy)), 20]
i_test_labels <- i[(.80*nrow(i_dummy)):nrow(i_dummy), 20]
library(gmodels)
library(class)
att_pred <- knn(train = i_train, test = i_test, cl = i_train_labels, k = 35)
CrossTable(x= i_test_labels, y = att_pred, prop.chisq = FALSE)
library(kernlab)
attendance_classifier <- ksvm(Attendance ~ ., data = i_train,
kernel = "vanilladot")
attendance_classifier
i_dummy <- i[-1]
i_dummy <- i_dummy[-19]
i_dummy <-model.matrix(~ ., data = i_dummy)
i_dummy <- as.data.frame(scale(i_dummy))
i_dummy <- as.data.frame(scale(i_dummy))
i_dummy <- i_dummy[-1]
i_dummy <- i_dummy[-1]
i_train <-i_dummy[0:(.80*nrow(i_dummy)),]
i_test <- i_dummy[(.80*nrow(i_dummy)):nrow(i_dummy), ]
i_train_labels <- i[0:(.80*nrow(i_dummy)), 20]
i_test_labels <- i[(.80*nrow(i_dummy)):nrow(i_dummy), 20]
library(gmodels)
library(class)
att_pred <- knn(train = i_train, test = i_test, cl = i_train_labels, k = 35)
CrossTable(x= i_test_labels, y = att_pred, prop.chisq = FALSE)
install.packages("shiny")
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
setwd("~/Desktop/code/InterviewAttendance")
runApp('Attendence')
View(attendenceByClient)
View(interviews)
runApp('Attendence')
x    <- interviews[, 24]
runApp('Attendence')
runApp('Attendence')
runApp('Attendence')
runApp('Attendence')
aa <- table(interviews$Attendance)
output$attendence <- renderDataTable(aa)
runApp('Attendence')
levels(aa)
aa
runApp('Attendence')
runApp('Attendence')
runApp('Attendence')
runApp('Attendence')
runApp('Attendence')
runApp('Attendence')
runApp('Attendence')
View(interviews)
library(dplyr)
interviews%>%
select(Attendance)
interviews%>%
select(Attendance, Date)
interviews%>%
select(Attendance, Date) %>%
filter(Date > "2015-09-04" & Date <"2015-09-18")
int <- interviews
int$Date <- as.Date(int$Date, format = "%Y-%m-%d")
str(int)
int%>%
select(Attendance, Date) %>%
filter(Date > "2015-09-04" & Date <"2015-09-18")
int%>%
select(Attendance, Date) %>%
filter(Date > "2015-01-04" & Date <"2015-09-18")
library(ggplot2)
dat <- int%>%
select(Attendance, Date) %>%
filter(Date > input$daterange3[1] & Date <input$daterange3[2])
dat <-int%>%
select(Attendance, Date) %>%
filter(Date > "2015-01-04" & Date <"2015-09-18")
head(dat)
plot<-ggplot(data=dat, aes(x=Attendance, y=count, fill = (Attendance)))+
geom_bar(stat="identity")
plot
plot<-ggplot(data=dat, aes(x=Date, y=count, fill = (Attendance)))+
geom_bar(stat="identity")
plot
dat <-int%>%
select(Attendance, Date) %>%
filter(Date > "2015-01-04" & Date <"2015-09-18")%>%
summarise(count = n())
head(dat)
dat <-int%>%
select(Attendance, Date) %>%
filter(Date > "2015-01-04" & Date <"2015-09-18")%>%
group_by(Attendance) %>%
summarise(count = n())
head(dat)
plot<-ggplot(data=dat, aes(x=Attendance, y=count, fill = (Attendance)))+
geom_bar(stat="identity")
plot
runApp('Attendence')
runApp('Attendence')
runApp('Attendence')
runApp('Attendence')
runApp('Attendence')
dat <-int%>%
select(Venue, Attendance) %>%
filter(Venue == "Chennai")%>%
group_by(Attendance) %>%
summarise(count = n())
plot<-ggplot(data=dat, aes(x=Attendance, y=count, fill = (Attendance)))+
geom_bar(stat="identity") + ylim(0, 1000)
plot
runApp('Attendence')
runApp('Attendence')
runApp('Attendence')
runApp('Attendence')
runApp('Attendence')
runApp('Attendence')
runApp('Attendence')
sms_results <- read.csv("sms_results.csv")
head(sms_results)
sms_results <- read.csv("sms_results.csv")
setwd("~/Desktop/Classes/TO 414/classwork")
sms_results <- read.csv("sms_results.csv")
head(sms_results)
head(subset(sms_results, actual_type != predict_type))
table(sms_results$actual_type, sms_results$predict_type)
xtabs(~ actual_type + predict_type, sms_results)
library(gmodels)
CrossTable(sms_results$actual_type, sms_results$predict_type)
(154 + 1202) / (154 + 1202 + 5 + 29)
(154 + 1202) / (154 + 1202 + 5 + 29)
(154 + 1202) / (154 + 1202 + 5 + 29)
(154 + 1202) / (154 + 1202 + 5 + 29)
(5 + 29) / (154 + 1202 + 5 + 29)
1 - 0.9755396
library(caret)
library(caret)
install.packages("caret")
library(caret)
confusionMatrix(sms_results$predict_type, sms_results$actual_type, positive = "spam")
library(caret)
confusionMatrix(sms_results$predict_type, sms_results$actual_type, positive = "spam")
install.packages("e1071")
library("e1071", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(caret)
confusionMatrix(sms_results$predict_type, sms_results$actual_type, positive = "spam")
confusionMatrix(sms_results$predict_type, sms_results$actual_type, positive = "spam")
pr_a <- 0.865 + 0.111
pr_a
pr_e <- 0.868 * 0.886 + 0.132 * 0.114
pr_e
k <- (pr_a - pr_e) / (1 - pr_e)
k
library(vcd)
install.packages("vcd")
library(vcd)
library(vcd)
Kappa(table(sms_results$actual_type, sms_results$predict_type))
CrossTable(sms_results$actual_type, sms_results$predict_type)
library(caret)
credit <- read.csv("credit.csv")
credit <- read.csv("credit.csv")
credit <- read.csv("credit.csv")
library(caret)
set.seed(300)
m <- train(default ~ ., data = credit, method = "C5.0")
m
runApp('~/Desktop/code/InterviewAttendance/Attendence')
runApp('~/Desktop/code/InterviewAttendance/Attendence')
runApp('~/Desktop/code/InterviewAttendance/Attendence')
runApp('~/Desktop/code/InterviewAttendance/Attendence')
library(shiny)
library(dplyr)
library(ggplot2)
int <- interviews
int$Date <- as.Date(int$Date, format = "%Y-%m-%d")
runApp('~/Desktop/code/InterviewAttendance/Attendence')
library(dplyr)
library(ggplot2)
int <- interviews
int$Date <- as.Date(int$Date, format = "%Y-%m-%d")
runApp('~/Desktop/code/InterviewAttendance/Attendence')
View(dat)
int <- interviews
int$Date <- as.Date(int$Date, format = "%Y-%m-%d")
dat <- int%>%
select(Attendance, Date) %>%
filter(Date > input$daterange3[1] & Date <input$daterange3[2]) %>%
group_by(Attendance) %>%
summarise(count = n())
dat <-int%>%
select(Attendance, Date) %>%
filter(Date > "2015-01-04" & Date <"2015-09-18")%>%
group_by(Attendance) %>%
summarise(count = n())
dat <-int%>%
select(Attendance, Date) %>%
filter(Date > "2015-01-04" & Date <"2015-09-18")%>%
group_by(Attendance) %>%
summarise(count = n())
library(shiny)
library(dplyr)
library(ggplot2)
int <- interviews
int$Date <- as.Date(int$Date, format = "%Y-%m-%d")
dat <-int%>%
select(Attendance, Date) %>%
filter(Date > "2015-01-04" & Date <"2015-09-18")%>%
group_by(Attendance) %>%
summarise(count = n())
dat <- int%>%
select(Attendance, Date) %>%
filter(Date > input$daterange3[1] & Date <input$daterange3[2]) %>%
group_by(Attendance) %>%
summarise(count = n())
plot<-ggplot(data=dat, aes(x=Attendance, y=count, fill = (Attendance)))+
geom_bar(stat="identity") + ylim(0, 1000)
plot
interviews <- read.csv("Interview.csv")
int <- interviews
setwd("~/Desktop/code/InterviewAttendance")
interviews <- read.csv("Interview.csv")
int <- interviews
int$Date <- as.Date(int$Date, format = "%Y-%m-%d")
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
dat <-int%>%
select(Attendance, Date) %>%
filter(Date > "2015-01-04" & Date <"2015-09-18")%>%
group_by(Attendance) %>%
summarise(count = n())
dat <- int%>%
select(Attendance, Date) %>%
filter(Date > input$daterange3[1] & Date <input$daterange3[2]) %>%
group_by(Attendance) %>%
summarise(count = n())
plot<-ggplot(data=dat, aes(x=Attendance, y=count, fill = (Attendance)))+
geom_bar(stat="identity") + ylim(0, 1000)
plot
# generate bins based on input$bins from ui.R
#x    <- interviews[, 24]
#bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
#hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
output$cityPlot <- renderPlot({
dat <-int%>%
select(Venue, Attendance) %>%
filter(Venue == input$city)%>%
group_by(Attendance) %>%
summarise(count = n())
plot<-ggplot(data=dat, aes(x=Attendance, y=count, fill = (Attendance)))+
geom_bar(stat="identity") + ylim(0, 1000)
plot
# generate bins based on input$bins from ui.R
#x    <- interviews[, 24]
#bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
#hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
# output$attendence <- renderDataTable(table(interviews$Attendance))
output$attendence <- renderTable(  dat <- int%>%
select(Attendance, Date) %>%
filter(Date > input$daterange3[1] & Date <input$daterange3[2]) %>%
group_by(Attendance) %>%
summarise(count = n()))
})
dat <-int%>%
select(Attendance, Date) %>%
filter(Date > "2015-01-04" & Date <"2015-09-18")%>%
group_by(Attendance) %>%
summarise(count = n())
dat <-int%>%
select(Attendance, Date) %>%
filter(Date > "2015-01-04" & Date <"2015-09-18")%>%
group_by(Attendance) %>%
summarise(count = n())
dat <- int%>%
select(Attendance, Date) %>%
filter(Date > input$daterange3[1] & Date <input$daterange3[2]) %>%
group_by(Attendance) %>%
summarise(count = n())
interviews <- interviews[ , 1:23]
names <- c("Date", "Client", "Industry", "Location", "Position", "Skillset", "Interview_Type", "ID", "Gender", "Candidate_Loc", "Job_Location", "Venue", "Native_Loc", "Permission", "Hope", "3_hour_call", "Alt_Number", "Resume_Printout", "Clarify_Venue", "Share_Letter", "Expected", "Attendance", "Marital_Status")
colnames(interviews) <- names
interviews <- interviews[, -8]
interviews$Attendance <- trimws(interviews$Attendance)
interviews$Attendance <- tolower(interviews$Attendance)
interviews$Attendance <- as.factor(interviews$Attendance)
round(prop.table(table(interviews$Attendance)) * 100, 1)
levels(interviews$Industry)
levels(interviews$Industry) <- c("BFSI", "Electronics", "IT", "IT", "IT", "Pharmaceuticals", "Telecom")
levels(interviews$Industry)[levels(interviews$Industry) == "IT Products and Services"] <- "IT"
levels(interviews$Industry)[levels(interviews$Industry) == "IT Services"] <- "IT"
levels(interviews$Industry)
attendenceByIndustry <- interviews %>%
group_by(Industry, Attendance) %>%
summarise(count = n())
plot<-ggplot(data=attendenceByIndustry, aes(x=Industry, y=count, fill = (Attendance)))+
geom_bar(stat="identity" , position = "dodge")
levels(interviews$Location)
levels(interviews$Location) <- c("Cochin","Bangalore","Chennai", "Chennai", "Chennai", "Chennai", "Delhi","Gurgaon","Gurgaonr","Hyderabad", "Noida")
interviews$Location <- tolower(interviews$Location)
levels(interviews$Location)[levels(interviews$Location) == "gurgaonr"] <- "gurgaon"
interviews$Location <- trimws(interviews$Location)
attendenceByPosition <- interviews %>%
group_by(Position, Attendance) %>%
summarise(count = n())
plot<-ggplot(data=attendenceByPosition, aes(x=Position, y=count, fill = (Attendance)))+
geom_bar(stat="identity" , position = "dodge")
barplot(table(interviews$Gender))
par(mfrow=c(3,3))
interviews$Hope <- trimws(interviews$Hope)
interviews$Hope <- tolower(interviews$Hope)
interviews$Hope <- as.factor(interviews$Hope)
levels(interviews$Hope)[levels(interviews$Hope) == "na"] <- "unsure"
levels(interviews$Hope)[levels(interviews$Hope) == "cant say"] <- "unsure"
levels(interviews$Hope)[levels(interviews$Hope) == "not sure"] <- "unsure"
barplot(table(interviews$Hope))
title("Hope Distribution")
interviews$Permission <- trimws(interviews$Permission)
interviews$Permission <- tolower(interviews$Permission)
levels(interviews$Permission)[levels(interviews$Permission) == "na"] <- "no"
levels(interviews$Permission)[levels(interviews$Permission) == "yet to confirm"] <- "no"
barplot(table(interviews$Permission))
title("Permission Distribution")
interviews$Alt_Number <- trimws(interviews$Alt_Number)
interviews$Alt_Number <- tolower(interviews$Alt_Number)
levels(interviews$Alt_Number)[levels(interviews$Alt_Number) == "na"] <- "no"
levels(interviews$Alt_Number)[levels(interviews$Alt_Number) == "no i have only thi number"] <- "no"
title("Alt Number Distribution")
table(interviews$Native_Loc)
levels(interviews$Native_Loc)[levels(interviews$Native_Loc) == "- Cochin-"] <- "Cochin"
levels(interviews$Native_Loc)[levels(interviews$Native_Loc) == "Delhi /NCR"] <- "Delhi"
interviews$Native_Loc[interviews$Native_Loc == "Delhi /NCR"] <- "NCR"
interviews <- interviews[!(interviews$Native_Loc== "Delhi /NCR"),]
interviews <- interviews[!(interviews$Native_Loc== "- Cochin-  "),]
table(interviews$Job_Location)
interviews$Job_Location <- trimws(interviews$Job_Location)
interviews$Job_Location <- tolower(interviews$Job_Location)
distances_lookup_table <- read.csv("distances.csv")
distances_lookup_table <- read.csv("distances.csv")
distances_lookup_table <- read.csv("distances.csv")
distances_lookup_table <- read.csv("distances.csv")
distances_lookup_table <- read.csv("distances.csv")
distances_lookup_table <- distances_lookup_table[-6,]
names(distances_lookup_table)[5] <- "Gurgaon"
interviews$Location[interviews$Location == "Gurgaonr"] <- "Gurgaon"
interviews$Location[469] <- "Gurgaon"
lookup <- function(distances_lookup_table, start, end) {
# If the start == end, distance is 0
if(tolower(as.character(start)) == tolower(as.character(end))){
return(0)
}
dist <- distances_lookup_table[tolower(distances_lookup_table$Native_Loc) == as.character(start), as.character(end)]
# If the lookup table returns nothing then set it to be -1 otherwise return the distance
if (is.null(dist)){
return (-1)
} else {
return(dist)
}
}
for(i in 1:nrow(interviews)){
val <-lookup(distances_lookup_table, tolower(interviews$Location[i]), sapply((as.character(interviews$Venue[i])),function(x) paste(toupper(substr(x,1,1)),substr(x,2,nchar(x)),sep="")))
interviews$Distance[i] <- val
}
interviews$Interview_Type <- trimws(interviews$Interview_Type)
interviews$Interview_Type <- tolower(interviews$Interview_Type)
interviews$Interview_Type <- as.factor(interviews$Interview_Type)
levels(interviews$Interview_Type)[levels(interviews$Interview_Type) == "sceduled walkin"] <- "scheduled walk in"
levels(interviews$Interview_Type)[levels(interviews$Interview_Type) == "scheduled walkin"] <- "scheduled walk in"
barplot(table((interviews$Interview_Type)))
attendenceByType <- interviews %>%
group_by(Interview_Type, Attendance) %>%
summarise(count = n())
plot<-ggplot(data=attendenceByType, aes(x=Interview_Type, y=count, fill = (Attendance)))+
geom_bar(stat="identity" , position = "dodge")
plot
interviews$Expected <- trimws(interviews$Expected)
interviews$Expected <- tolower(interviews$Expected)
interviews$Expected <- as.factor(interviews$Expected)
levels(interviews$Expected)[levels(interviews$Expected) == "10.30 am"] <- "yes"
levels(interviews$Expected)[levels(interviews$Expected) == "11:00 am"] <- "yes"
levels(interviews$Expected)[levels(interviews$Expected) == "NA"] <- "no"
barplot(table((interviews$Expected)))
attendenceByExpected <- interviews %>%
group_by(Expected, Attendance) %>%
summarise(count = n())
plot<-ggplot(data=attendenceByExpected, aes(x=Expected, y=count, fill = (Attendance)))+
geom_bar(stat="identity" , position = "dodge")
levels(interviews$Client)[levels(interviews$Client) == "Hewitt"] <- "Aon Hewitt"
levels(interviews$Client)[levels(interviews$Client) == "Aon hewitt Gurgaon"] <- "Aon Hewitt"
levels(interviews$Client)[levels(interviews$Client) == "Standard Chartered Bank Chennai"] <- "Standard Chartered Bank"
attendenceByClient <- interviews %>%
group_by(Client, Attendance) %>%
summarise(count = n())
library(ggplot2)
library(dplyr)
attendenceByDOW <- interviews %>%
group_by(DayOfWeek, Attendance) %>%
summarise(count = n())
plot<-ggplot(data=attendenceByDOW, aes(x=DayOfWeek, y=count, fill = (Attendance)))+
geom_bar(stat="identity" , position = "dodge")
plot
attendenceByMarriage <- interviews %>%
group_by(Marital_Status, Attendance) %>%
summarise(count = n())
